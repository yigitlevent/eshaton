[{"C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\index.tsx":"1","C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\components\\Login.tsx":"2","C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\components\\Register.tsx":"3","C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\components\\CharacterSheet.tsx":"4","C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\parts\\Table.tsx":"5","C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\parts\\Block.tsx":"6","C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\parts\\Divider.tsx":"7"},{"size":2840,"mtime":1606423270759,"results":"8","hashOfConfig":"9"},{"size":883,"mtime":1606403704223,"results":"10","hashOfConfig":"9"},{"size":1225,"mtime":1606403701627,"results":"11","hashOfConfig":"9"},{"size":2404,"mtime":1606425250076,"results":"12","hashOfConfig":"9"},{"size":1257,"mtime":1606464321872,"results":"13","hashOfConfig":"9"},{"size":11307,"mtime":1606470251500,"results":"14","hashOfConfig":"9"},{"size":244,"mtime":1606461425099,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"1lrdnkc",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\index.tsx",["31"],"import { useEffect, useState, StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./style.scss\";\n\nimport { Login } from \"./components/Login\";\nimport { Register } from \"./components/Register\";\nimport { CharacterSheet } from \"./components/CharacterSheet\";\n\nfunction App(): JSX.Element {\n\tconst [isLoggedIn, setIsLoggedIn] = useState(true);\n\tconst [isLogin, setIsLogin] = useState(true);\n\n\tconst [sheet, setSheet] = useState(\"none\" as sheettype);\n\tconst [campaign, setCampaign] = useState(\"none\" as campaigntype);\n\n\tconst userRequest = (path: string, requestType: requests, data?: registrationform | loginform): void => {\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.open(\"POST\", path, true); // true = asynchronous\n\t\trequest.setRequestHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n\n\t\tif (data) { request.send(JSON.stringify(data)); }\n\t\telse { request.abort(); }\n\n\t\trequest.onreadystatechange = () => {\n\t\t\tif (request.readyState === XMLHttpRequest.DONE) {\n\t\t\t\tconst response = JSON.parse(request.response);\n\n\t\t\t\tif (response.status === \"failure\") {\n\t\t\t\t\tconsole.log(response.message);\n\t\t\t\t}\n\t\t\t\telse if (requestType === \"login\" && response.status === \"success\") {\n\t\t\t\t\tconsole.log(response.message);\n\t\t\t\t\tsetIsLoggedIn(true);\n\t\t\t\t\t// TODO: Login successful.\n\t\t\t\t\t// TODO: Load user campaigns and characters\n\t\t\t\t}\n\t\t\t\telse if (requestType === \"register\" && response.status === \"success\") {\n\t\t\t\t\tconsole.log(response.message);\n\t\t\t\t\tsetIsLogin(true);\n\t\t\t\t\t// TODO: Registration successful, please login.\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n\n\tuseEffect(() => {\n\n\t}, []);\n\n\treturn (\n\t\t<StrictMode>\n\t\t\t{(!isLoggedIn)\n\t\t\t\t? <div className=\"entrance-wrapper\">\n\t\t\t\t\t<div className=\"entrance\">\n\t\t\t\t\t\t<div className=\"logo\" />\n\t\t\t\t\t\t<div className=\"title\">ESHATON // ENTRANCE</div>\n\n\t\t\t\t\t\t{(isLogin)\n\t\t\t\t\t\t\t? <Login setIsLogin={setIsLogin} userRequest={userRequest} />\n\t\t\t\t\t\t\t: <Register setIsLogin={setIsLogin} userRequest={userRequest} />\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t: <div className=\"main-wrapper\">\n\n\t\t\t\t\t<div className=\"dashboard\">\n\t\t\t\t\t\t<div className=\"logo\" />\n\t\t\t\t\t\t<div className=\"title\">ESHATON // DASHBOARD</div>\n\n\t\t\t\t\t\t<div className=\"my-characters\">\n\t\t\t\t\t\t\t<div className=\"title\">MY CHARACTERS</div>\n\t\t\t\t\t\t\t<input className=\"button\" type=\"button\" value=\"Create New Character\" onClick={() => { setSheet(\"new\"); }} />\n\t\t\t\t\t\t\t<div className=\"list\"></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"my-campaigns\">\n\t\t\t\t\t\t\t<div className=\"title\">MY CAMPAIGNS</div>\n\t\t\t\t\t\t\t<input className=\"button\" type=\"button\" value=\"Create New Campaign\" onClick={() => { setCampaign(\"new\"); }} />\n\t\t\t\t\t\t\t<div className=\"list\"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{(sheet !== \"none\")\n\t\t\t\t\t\t? <CharacterSheet sheet={sheet} />\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\n\t\t\t\t</div>\n\t\t\t}\n\t\t</StrictMode>\n\t);\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));","C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\components\\Login.tsx",[],"C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\components\\Register.tsx",[],"C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\components\\CharacterSheet.tsx",[],"C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\parts\\Table.tsx",[],"C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\parts\\Block.tsx",[],"C:\\Users\\Adramelech\\Documents\\GitHub\\eshaton\\client\\src\\parts\\Divider.tsx",[],{"ruleId":"32","severity":1,"message":"33","line":15,"column":9,"nodeType":"34","messageId":"35","endLine":15,"endColumn":17},"@typescript-eslint/no-unused-vars","'campaign' is assigned a value but never used.","Identifier","unusedVar"]